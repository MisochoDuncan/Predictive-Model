import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report
from sklearn.impute import SimpleImputer  # For handling missing values
import numpy as np

# Generating sample data
np.random.seed(42)

timestamps = pd.date_range('2023-01-01', periods=1000, freq='5min')
sensor_readings = np.random.uniform(low=20, high=30, size=(1000, 3))  # Assuming 3 sensor readings are recorded
maintenance_events = np.random.choice(['None', 'Scheduled', 'Repair'], size=1000)
equipment_failure = np.random.randint(0, 2, size=1000)

data = pd.DataFrame({
    'timestamp': timestamps,
    'sensor_reading1': sensor_readings[:, 0],
    'sensor_reading2': sensor_readings[:, 1],
    'sensor_reading3': sensor_readings[:, 2],
    'maintenance_event': maintenance_events,
    'equipment_failure': equipment_failure
})

# Save generated data to a CSV file
data.to_csv('generated_data.csv', index=False)

# Load the generated dataset onto a csv file
data = pd.read_csv('generated_data.csv')

# Data Preprocessing
data['rolling_average'] = data['sensor_reading1'].rolling(window=10).mean()

# Handle missing values
numeric_columns = ['sensor_reading1', 'sensor_reading2', 'sensor_reading3', 'rolling_average']
imputer = SimpleImputer(strategy='mean')

data[numeric_columns] = imputer.fit_transform(data[numeric_columns])

# Split the data into training and testing sets
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)


# Define features and target variable
X_train = train_data[['sensor_reading1', 'sensor_reading2', 'sensor_reading3', 'rolling_average']]
y_train = train_data['equipment_failure']

# Initialize the model
model = RandomForestClassifier()

# Train the model
model.fit(X_train, y_train)

# Model Evaluation
X_test = test_data[['sensor_reading1', 'sensor_reading2', 'sensor_reading3', 'rolling_average']]
y_test = test_data['equipment_failure']
predictions = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, predictions)
report = classification_report(y_test, predictions)

print(f'Accuracy: {accuracy}')
print(f'Classification Report:\n{report}')

# proactive maintenance from the new data
new_timestamps = pd.date_range('2023-06-01', periods=100, freq='5min')
new_sensor_readings = np.random.uniform(low=20, high=30, size=(100, 3))
new_maintenance_events = np.random.choice(['None', 'Scheduled', 'Repair'], size=100)

new_data = pd.DataFrame({
    'timestamp': new_timestamps,
    'sensor_reading1': new_sensor_readings[:, 0],
    'sensor_reading2': new_sensor_readings[:, 1],
    'sensor_reading3': new_sensor_readings[:, 2],
    'maintenance_event': new_maintenance_events
})

new_data['rolling_average'] = new_data['sensor_reading1'].rolling(window=10).mean()

# predictions on new data
new_data['rolling_average'] = new_data['sensor_reading1'].rolling(window=10).mean()
